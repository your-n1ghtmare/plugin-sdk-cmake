/*
    Plugin-SDK (Grand Theft Auto 3) header file
    Authors: GTA Community. See more here
    https://github.com/DK22Pac/plugin-sdk
    Do not delete this comment block. Respect others' work!
*/
#include "PluginBase.h"

namespace plugin {

CTOR_META_BEGIN(CParticle)
static int address;
static int global_address;
static const int id = 0x50C410;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x50C410, 0x50C500, 0x50C490>;
// total references count: 10en (1), 11en (1), steam (1)
using refs_t = RefList<0x50FC5D,100,2,0,1, 0x50FE4D,110,2,0,1, 0x50FDDD,120,2,0,1>;
using def_t = CParticle *(CParticle *);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CParticle *>, 0>;
META_END

DTOR_META_BEGIN(CParticle)
static int address;
static int global_address;
static const int id = 0x50C420;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x50C420, 0x50C510, 0x50C4A0>;
// total references count: 10en (2), 11en (2), steam (2)
using refs_t = RefList<0x50FC58,100,2,0,1, 0x50FC98,100,2,0,1, 0x50FE48,110,2,0,1, 0x50FE88,110,2,0,1, 0x50FDD8,120,2,0,1, 0x50FE18,120,2,0,1>;
using def_t = void(CParticle *);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Thiscall;
using args_t = ArgPick<ArgTypes<CParticle *>, 0>;
META_END

META_BEGIN(CParticle::ReloadConfig)
static int address;
static int global_address;
static const int id = 0x50C430;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x50C430, 0x50C520, 0x50C4B0>;
// total references count: 10en (3), 11en (3), steam (3)
using refs_t = RefList<0x48C5C1,100,0,0x48C4B0,1, 0x50C575,100,0,0x50C570,1, 0x59152A,100,0,0x590A00,1, 0x48C6C1,110,0,0x48C5B0,1, 0x50C665,110,0,0x50C660,1, 0x5917EA,110,0,0x590CC0,1, 0x48C651,120,0,0x48C540,1, 0x50C5F5,120,0,0x50C5F0,1, 0x5916DA,120,0,0x590BB0,1>;
using def_t = void();
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Cdecl;
using args_t = ArgPick<ArgTypes<>>;
META_END

META_BEGIN(CParticle::Initialise)
static int address;
static int global_address;
static const int id = 0x50C570;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x50C570, 0x50C660, 0x50C5F0>;
// total references count: 10en (1), 11en (1), steam (1)
using refs_t = RefList<0x48C000,100,0,0x48BED0,1, 0x48C0F0,110,0,0x48BFC0,1, 0x48C080,120,0,0x48BF50,1>;
using def_t = void();
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Cdecl;
using args_t = ArgPick<ArgTypes<>>;
META_END

META_BEGIN(CParticle::Shutdown)
static int address;
static int global_address;
static const int id = 0x50CF40;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x50CF40, 0x50D030, 0x50CFC0>;
// total references count: 10en (1), 11en (1), steam (1)
using refs_t = RefList<0x48C48C,100,0,0x48C3A0,1, 0x48C57C,110,0,0x48C490,1, 0x48C50C,120,0,0x48C420,1>;
using def_t = void();
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Cdecl;
using args_t = ArgPick<ArgTypes<>>;
META_END

META_BEGIN_OVERLOADED(CParticle::AddParticle, CParticle *(*)(tParticleType, CVector const &, CVector const &, CEntity *, float, int, int, int, int))
static int address;
static int global_address;
static const int id = 0x50D140;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x50D140, 0x50D330, 0x50D2C0>;
// total references count: 10en (147), 11en (147), steam (147)
using refs_t = RefList<0x479BB0,100,0,0x4798D0,1, 0x479BFB,100,0,0x4798D0,2, 0x49A143,100,0,0x499BE0,1, 0x4BCC3A,100,0,0x4BCA80,1, 0x4BCD6C,100,0,0x4BCA80,2, 0x4BCE24,100,0,0x4BCA80,3, 0x4BCF4E,100,0,0x4BCA80,4, 0x4BCFEE,100,0,0x4BCA80,5, 0x4BD1B3,100,0,0x4BCA80,6, 0x4BD219,100,0,0x4BCA80,7, 0x4BD2C0,100,0,0x4BCA80,8, 0x4BD48D,100,0,0x4BCA80,9, 0x4BF3DE,100,0,0x4BCA80,10, 0x4BF75C,100,0,0x4BCA80,11, 0x4D00DC,100,0,0x4CFDD0,1, 0x4D0394,100,0,0x4CFDD0,2, 0x4E78D1,100,0,0x4E7780,1, 0x4E946D,100,0,0x4E8EC0,1, 0x4EAFE2,100,0,0x4EAEE0,1, 0x4EB024,100,0,0x4EAEE0,2, 0x4EB517,100,0,0x4EB470,1, 0x4EB564,100,0,0x4EB470,2, 0x4EB5A9,100,0,0x4EB470,3, 0x50E3AF,100,0,0x50DCF0,1, 0x50E42E,100,0,0x50DCF0,2, 0x50E4E7,100,0,0x50DCF0,3, 0x50E562,100,0,0x50DCF0,4, 0x50EA37,100,0,0x50DCF0,5, 0x52F127,100,0,0x52F030,1, 0x52F1EA,100,0,0x52F030,2, 0x5321E8,100,0,0x531470,1, 0x5322B7,100,0,0x531470,2, 0x532386,100,0,0x531470,3, 0x532455,100,0,0x531470,4, 0x53255E,100,0,0x531470,5, 0x532664,100,0,0x531470,6, 0x53276A,100,0,0x531470,7, 0x532870,100,0,0x531470,8, 0x5345B6,100,0,0x531470,9, 0x5346BA,100,0,0x531470,10, 0x534705,100,0,0x531470,11, 0x535626,100,0,0x535450,1, 0x5356B0,100,0,0x535450,2, 0x53578D,100,0,0x535450,3, 0x535DA4,100,0,0x535B40,1, 0x53615E,100,0,0x535B40,2, 0x5361E5,100,0,0x535B40,3, 0x53626C,100,0,0x535B40,4, 0x53636A,100,0,0x535B40,5, 0x536453,100,0,0x535B40,6, 0x536673,100,0,0x535B40,7, 0x5367BB,100,0,0x535B40,8, 0x536903,100,0,0x535B40,9, 0x536A6B,100,0,0x535B40,10, 0x536BB3,100,0,0x535B40,11, 0x536CFB,100,0,0x535B40,12, 0x537080,100,0,0x535B40,13, 0x537369,100,0,0x535B40,14, 0x537393,100,0,0x535B40,15, 0x5373CA,100,0,0x535B40,16, 0x53F99D,100,0,0x53EF10,1, 0x53FAA1,100,0,0x53EF10,2, 0x53FB76,100,0,0x53EF10,3, 0x53FC0F,100,0,0x53EF10,4, 0x549815,100,0,0x547CC0,1, 0x556AD1,100,0,0x5554E0,1, 0x5588AA,100,0,0x558550,1, 0x5589E4,100,0,0x558550,2, 0x558A52,100,0,0x558550,3, 0x55B84D,100,0,0x55B7C0,1, 0x55CF07,100,0,0x55CA20,1, 0x55CF2E,100,0,0x55CA20,2, 0x55CF55,100,0,0x55CA20,3, 0x55CFE2,100,0,0x55CA20,4, 0x55D064,100,0,0x55CA20,5, 0x55D993,100,0,0x55D2E0,1, 0x55DB62,100,0,0x55D2E0,2, 0x55DD3F,100,0,0x55D2E0,3, 0x55DDAE,100,0,0x55D2E0,4, 0x55DE2C,100,0,0x55D2E0,5, 0x55DEAA,100,0,0x55D2E0,6, 0x55DF37,100,0,0x55D2E0,7, 0x55E186,100,0,0x55D2E0,8, 0x55E21F,100,0,0x55D2E0,9, 0x55E28E,100,0,0x55D2E0,10, 0x55E2FD,100,0,0x55D2E0,11, 0x55E3DD,100,0,0x55D2E0,12, 0x55E43C,100,0,0x55D2E0,13, 0x55E49B,100,0,0x55D2E0,14, 0x55E55C,100,0,0x55D2E0,15, 0x55E5BB,100,0,0x55D2E0,16, 0x55E61A,100,0,0x55D2E0,17, 0x55E7D2,100,0,0x55D2E0,18, 0x55E85D,100,0,0x55D2E0,19, 0x55E8E8,100,0,0x55D2E0,20, 0x55E9B9,100,0,0x55D2E0,21, 0x55EA28,100,0,0x55D2E0,22, 0x55EA97,100,0,0x55D2E0,23, 0x55EB24,100,0,0x55D2E0,24, 0x55ED8B,100,0,0x55D2E0,25, 0x55EE16,100,0,0x55D2E0,26, 0x55EEA6,100,0,0x55D2E0,27, 0x55EF1A,100,0,0x55D2E0,28, 0x55EFAA,100,0,0x55D2E0,29, 0x55F01E,100,0,0x55D2E0,30, 0x55F09E,100,0,0x55D2E0,31, 0x55F12B,100,0,0x55D2E0,32, 0x55F392,100,0,0x55D2E0,33, 0x55F41D,100,0,0x55D2E0,34, 0x55F49D,100,0,0x55D2E0,35, 0x55F50B,100,0,0x55D2E0,36, 0x55F565,100,0,0x55D2E0,37, 0x55F5BF,100,0,0x55D2E0,38, 0x55FDE8,100,0,0x55F950,1, 0x55FECC,100,0,0x55F950,2, 0x55FFDA,100,0,0x55F950,3, 0x560122,100,0,0x55F950,4, 0x560205,100,0,0x55F950,5, 0x560404,100,0,0x55F950,6, 0x56046C,100,0,0x55F950,7, 0x5607A9,100,0,0x560620,1, 0x560818,100,0,0x560620,2, 0x560887,100,0,0x560620,3, 0x5608CF,100,0,0x560620,4, 0x560934,100,0,0x560620,5, 0x56098B,100,0,0x560620,6, 0x5609E2,100,0,0x560620,7, 0x560A39,100,0,0x560620,8, 0x56120F,100,0,0x560620,9, 0x5612B5,100,0,0x560620,10, 0x561427,100,0,0x560620,11, 0x56148B,100,0,0x560620,12, 0x561693,100,0,0x560620,13, 0x561CB6,100,0,0x561C70,1, 0x561D04,100,0,0x561C70,2, 0x561D52,100,0,0x561C70,3, 0x561DA0,100,0,0x561C70,4, 0x561DEE,100,0,0x561C70,5, 0x562387,100,0,0x562180,1, 0x5629E5,100,0,0x5624D0,1, 0x562CB4,100,0,0x5624D0,2, 0x563B56,100,0,0x563B00,1, 0x563C43,100,0,0x563B00,2, 0x563DD4,100,0,0x563B00,3, 0x563E7E,100,0,0x563B00,4, 0x563F73,100,0,0x563B00,5, 0x589767,100,0,0x588490,1, 0x479BB0,110,0,0x4798D0,1, 0x479BFB,110,0,0x4798D0,2, 0x49A233,110,0,0x499CD0,1, 0x4BCD2A,110,0,0x4BCB70,1, 0x4BCE5C,110,0,0x4BCB70,2, 0x4BCF14,110,0,0x4BCB70,3, 0x4BD03E,110,0,0x4BCB70,4, 0x4BD0DE,110,0,0x4BCB70,5, 0x4BD2A3,110,0,0x4BCB70,6, 0x4BD309,110,0,0x4BCB70,7, 0x4BD3B0,110,0,0x4BCB70,8, 0x4BD57D,110,0,0x4BCB70,9, 0x4BF4CE,110,0,0x4BCB70,10, 0x4BF84C,110,0,0x4BCB70,11, 0x4D017C,110,0,0x4CFE70,1, 0x4D0434,110,0,0x4CFE70,2, 0x4E7981,110,0,0x4E7830,1, 0x4E951D,110,0,0x4E8F70,1, 0x4EB092,110,0,0x4EAF90,1, 0x4EB0D4,110,0,0x4EAF90,2, 0x4EB5C7,110,0,0x4EB520,1, 0x4EB614,110,0,0x4EB520,2, 0x4EB659,110,0,0x4EB520,3, 0x50E59F,110,0,0x50DEE0,1, 0x50E61E,110,0,0x50DEE0,2, 0x50E6D7,110,0,0x50DEE0,3, 0x50E752,110,0,0x50DEE0,4, 0x50EC27,110,0,0x50DEE0,5, 0x52F367,110,0,0x52F270,1, 0x52F42A,110,0,0x52F270,2, 0x532428,110,0,0x5316B0,1, 0x5324F7,110,0,0x5316B0,2, 0x5325C6,110,0,0x5316B0,3, 0x532695,110,0,0x5316B0,4, 0x53279E,110,0,0x5316B0,5, 0x5328A4,110,0,0x5316B0,6, 0x5329AA,110,0,0x5316B0,7, 0x532AB0,110,0,0x5316B0,8, 0x5347F6,110,0,0x5316B0,9, 0x5348FA,110,0,0x5316B0,10, 0x534945,110,0,0x5316B0,11, 0x535866,110,0,0x535690,1, 0x5358F0,110,0,0x535690,2, 0x5359CD,110,0,0x535690,3, 0x535FE4,110,0,0x535D80,1, 0x53639E,110,0,0x535D80,2, 0x536425,110,0,0x535D80,3, 0x5364AC,110,0,0x535D80,4, 0x5365AA,110,0,0x535D80,5, 0x536693,110,0,0x535D80,6, 0x5368B3,110,0,0x535D80,7, 0x5369FB,110,0,0x535D80,8, 0x536B43,110,0,0x535D80,9, 0x536CAB,110,0,0x535D80,10, 0x536DF3,110,0,0x535D80,11, 0x536F3B,110,0,0x535D80,12, 0x5372C0,110,0,0x535D80,13, 0x5375A9,110,0,0x535D80,14, 0x5375D3,110,0,0x535D80,15, 0x53760A,110,0,0x535D80,16, 0x53FBDD,110,0,0x53F150,1, 0x53FCE1,110,0,0x53F150,2, 0x53FDB6,110,0,0x53F150,3, 0x53FE4F,110,0,0x53F150,4, 0x549A15,110,0,0x547EC0,1, 0x556C01,110,0,0x555610,1, 0x5589DA,110,0,0x558680,1, 0x558B14,110,0,0x558680,2, 0x558B82,110,0,0x558680,3, 0x55B97D,110,0,0x55B8F0,1, 0x55D037,110,0,0x55CB50,1, 0x55D05E,110,0,0x55CB50,2, 0x55D085,110,0,0x55CB50,3, 0x55D112,110,0,0x55CB50,4, 0x55D194,110,0,0x55CB50,5, 0x55DAC3,110,0,0x55D410,1, 0x55DC92,110,0,0x55D410,2, 0x55DE6F,110,0,0x55D410,3, 0x55DEDE,110,0,0x55D410,4, 0x55DF5C,110,0,0x55D410,5, 0x55DFDA,110,0,0x55D410,6, 0x55E067,110,0,0x55D410,7, 0x55E2B6,110,0,0x55D410,8, 0x55E34F,110,0,0x55D410,9, 0x55E3BE,110,0,0x55D410,10, 0x55E42D,110,0,0x55D410,11, 0x55E50D,110,0,0x55D410,12, 0x55E56C,110,0,0x55D410,13, 0x55E5CB,110,0,0x55D410,14, 0x55E68C,110,0,0x55D410,15, 0x55E6EB,110,0,0x55D410,16, 0x55E74A,110,0,0x55D410,17, 0x55E902,110,0,0x55D410,18, 0x55E98D,110,0,0x55D410,19, 0x55EA18,110,0,0x55D410,20, 0x55EAE9,110,0,0x55D410,21, 0x55EB58,110,0,0x55D410,22, 0x55EBC7,110,0,0x55D410,23, 0x55EC54,110,0,0x55D410,24, 0x55EEBB,110,0,0x55D410,25, 0x55EF46,110,0,0x55D410,26, 0x55EFD6,110,0,0x55D410,27, 0x55F04A,110,0,0x55D410,28, 0x55F0DA,110,0,0x55D410,29, 0x55F14E,110,0,0x55D410,30, 0x55F1CE,110,0,0x55D410,31, 0x55F25B,110,0,0x55D410,32, 0x55F4C2,110,0,0x55D410,33, 0x55F54D,110,0,0x55D410,34, 0x55F5CD,110,0,0x55D410,35, 0x55F63B,110,0,0x55D410,36, 0x55F695,110,0,0x55D410,37, 0x55F6EF,110,0,0x55D410,38, 0x55FF18,110,0,0x55FA80,1, 0x55FFFC,110,0,0x55FA80,2, 0x56010A,110,0,0x55FA80,3, 0x560252,110,0,0x55FA80,4, 0x560335,110,0,0x55FA80,5, 0x560534,110,0,0x55FA80,6, 0x56059C,110,0,0x55FA80,7, 0x5608D9,110,0,0x560750,1, 0x560948,110,0,0x560750,2, 0x5609B7,110,0,0x560750,3, 0x5609FF,110,0,0x560750,4, 0x560A64,110,0,0x560750,5, 0x560ABB,110,0,0x560750,6, 0x560B12,110,0,0x560750,7, 0x560B69,110,0,0x560750,8, 0x56133F,110,0,0x560750,9, 0x5613E5,110,0,0x560750,10, 0x561557,110,0,0x560750,11, 0x5615BB,110,0,0x560750,12, 0x5617C3,110,0,0x560750,13, 0x561DE6,110,0,0x561DA0,1, 0x561E34,110,0,0x561DA0,2, 0x561E82,110,0,0x561DA0,3, 0x561ED0,110,0,0x561DA0,4, 0x561F1E,110,0,0x561DA0,5, 0x5624B7,110,0,0x5622B0,1, 0x562B15,110,0,0x562600,1, 0x562DE4,110,0,0x562600,2, 0x563C86,110,0,0x563C30,1, 0x563D73,110,0,0x563C30,2, 0x563F04,110,0,0x563C30,3, 0x563FAE,110,0,0x563C30,4, 0x5640A3,110,0,0x563C30,5, 0x589AA7,110,0,0x5887D0,1, 0x479BB0,120,0,0x4798D0,1, 0x479BFB,120,0,0x4798D0,2, 0x49A1C3,120,0,0x499C60,1, 0x4BCCBA,120,0,0x4BCB00,1, 0x4BCDEC,120,0,0x4BCB00,2, 0x4BCEA4,120,0,0x4BCB00,3, 0x4BCFCE,120,0,0x4BCB00,4, 0x4BD06E,120,0,0x4BCB00,5, 0x4BD233,120,0,0x4BCB00,6, 0x4BD299,120,0,0x4BCB00,7, 0x4BD340,120,0,0x4BCB00,8, 0x4BD50D,120,0,0x4BCB00,9, 0x4BF45E,120,0,0x4BCB00,10, 0x4BF7DC,120,0,0x4BCB00,11, 0x4D010C,120,0,0x4CFE00,1, 0x4D03C4,120,0,0x4CFE00,2, 0x4E7911,120,0,0x4E77C0,1, 0x4E94AD,120,0,0x4E8F00,1, 0x4EB022,120,0,0x4EAF20,1, 0x4EB064,120,0,0x4EAF20,2, 0x4EB557,120,0,0x4EB4B0,1, 0x4EB5A4,120,0,0x4EB4B0,2, 0x4EB5E9,120,0,0x4EB4B0,3, 0x50E52F,120,0,0x50DE70,1, 0x50E5AE,120,0,0x50DE70,2, 0x50E667,120,0,0x50DE70,3, 0x50E6E2,120,0,0x50DE70,4, 0x50EBB7,120,0,0x50DE70,5, 0x52F2F7,120,0,0x52F200,1, 0x52F3BA,120,0,0x52F200,2, 0x5323B8,120,0,0x531640,1, 0x532487,120,0,0x531640,2, 0x532556,120,0,0x531640,3, 0x532625,120,0,0x531640,4, 0x53272E,120,0,0x531640,5, 0x532834,120,0,0x531640,6, 0x53293A,120,0,0x531640,7, 0x532A40,120,0,0x531640,8, 0x534786,120,0,0x531640,9, 0x53488A,120,0,0x531640,10, 0x5348D5,120,0,0x531640,11, 0x5357F6,120,0,0x535620,1, 0x535880,120,0,0x535620,2, 0x53595D,120,0,0x535620,3, 0x535F74,120,0,0x535D10,1, 0x53632E,120,0,0x535D10,2, 0x5363B5,120,0,0x535D10,3, 0x53643C,120,0,0x535D10,4, 0x53653A,120,0,0x535D10,5, 0x536623,120,0,0x535D10,6, 0x536843,120,0,0x535D10,7, 0x53698B,120,0,0x535D10,8, 0x536AD3,120,0,0x535D10,9, 0x536C3B,120,0,0x535D10,10, 0x536D83,120,0,0x535D10,11, 0x536ECB,120,0,0x535D10,12, 0x537250,120,0,0x535D10,13, 0x537539,120,0,0x535D10,14, 0x537563,120,0,0x535D10,15, 0x53759A,120,0,0x535D10,16, 0x53FB8D,120,0,0x53F100,1, 0x53FC91,120,0,0x53F100,2, 0x53FD66,120,0,0x53F100,3, 0x53FDFF,120,0,0x53F100,4, 0x5499C5,120,0,0x547E70,1, 0x556BB1,120,0,0x5555C0,1, 0x55898A,120,0,0x558630,1, 0x558AC4,120,0,0x558630,2, 0x558B32,120,0,0x558630,3, 0x55B92D,120,0,0x55B8A0,1, 0x55CFE7,120,0,0x55CB00,1, 0x55D00E,120,0,0x55CB00,2, 0x55D035,120,0,0x55CB00,3, 0x55D0C2,120,0,0x55CB00,4, 0x55D144,120,0,0x55CB00,5, 0x55DA73,120,0,0x55D3C0,1, 0x55DC42,120,0,0x55D3C0,2, 0x55DE1F,120,0,0x55D3C0,3, 0x55DE8E,120,0,0x55D3C0,4, 0x55DF0C,120,0,0x55D3C0,5, 0x55DF8A,120,0,0x55D3C0,6, 0x55E017,120,0,0x55D3C0,7, 0x55E266,120,0,0x55D3C0,8, 0x55E2FF,120,0,0x55D3C0,9, 0x55E36E,120,0,0x55D3C0,10, 0x55E3DD,120,0,0x55D3C0,11, 0x55E4BD,120,0,0x55D3C0,12, 0x55E51C,120,0,0x55D3C0,13, 0x55E57B,120,0,0x55D3C0,14, 0x55E63C,120,0,0x55D3C0,15, 0x55E69B,120,0,0x55D3C0,16, 0x55E6FA,120,0,0x55D3C0,17, 0x55E8B2,120,0,0x55D3C0,18, 0x55E93D,120,0,0x55D3C0,19, 0x55E9C8,120,0,0x55D3C0,20, 0x55EA99,120,0,0x55D3C0,21, 0x55EB08,120,0,0x55D3C0,22, 0x55EB77,120,0,0x55D3C0,23, 0x55EC04,120,0,0x55D3C0,24, 0x55EE6B,120,0,0x55D3C0,25, 0x55EEF6,120,0,0x55D3C0,26, 0x55EF86,120,0,0x55D3C0,27, 0x55EFFA,120,0,0x55D3C0,28, 0x55F08A,120,0,0x55D3C0,29, 0x55F0FE,120,0,0x55D3C0,30, 0x55F17E,120,0,0x55D3C0,31, 0x55F20B,120,0,0x55D3C0,32, 0x55F472,120,0,0x55D3C0,33, 0x55F4FD,120,0,0x55D3C0,34, 0x55F57D,120,0,0x55D3C0,35, 0x55F5EB,120,0,0x55D3C0,36, 0x55F645,120,0,0x55D3C0,37, 0x55F69F,120,0,0x55D3C0,38, 0x55FEC8,120,0,0x55FA30,1, 0x55FFAC,120,0,0x55FA30,2, 0x5600BA,120,0,0x55FA30,3, 0x560202,120,0,0x55FA30,4, 0x5602E5,120,0,0x55FA30,5, 0x5604E4,120,0,0x55FA30,6, 0x56054C,120,0,0x55FA30,7, 0x560889,120,0,0x560700,1, 0x5608F8,120,0,0x560700,2, 0x560967,120,0,0x560700,3, 0x5609AF,120,0,0x560700,4, 0x560A14,120,0,0x560700,5, 0x560A6B,120,0,0x560700,6, 0x560AC2,120,0,0x560700,7, 0x560B19,120,0,0x560700,8, 0x5612EF,120,0,0x560700,9, 0x561395,120,0,0x560700,10, 0x561507,120,0,0x560700,11, 0x56156B,120,0,0x560700,12, 0x561773,120,0,0x560700,13, 0x561D96,120,0,0x561D50,1, 0x561DE4,120,0,0x561D50,2, 0x561E32,120,0,0x561D50,3, 0x561E80,120,0,0x561D50,4, 0x561ECE,120,0,0x561D50,5, 0x562467,120,0,0x562260,1, 0x562AC5,120,0,0x5625B0,1, 0x562D94,120,0,0x5625B0,2, 0x563C36,120,0,0x563BE0,1, 0x563D23,120,0,0x563BE0,2, 0x563EB4,120,0,0x563BE0,3, 0x563F5E,120,0,0x563BE0,4, 0x564053,120,0,0x563BE0,5, 0x589997,120,0,0x5886C0,1>;
using def_t = CParticle *(tParticleType, CVector const &, CVector const &, CEntity *, float, int, int, int, int);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Cdecl;
using args_t = ArgPick<ArgTypes<tParticleType,CVector const &,CVector const &,CEntity *,float,int,int,int,int>, 0,1,2,3,4,5,6,7,8>;
META_END

META_BEGIN_OVERLOADED(CParticle::AddParticle, CParticle *(*)(tParticleType, CVector const &, CVector const &, CEntity *, float, RwRGBA const &, int, int, int, int))
static int address;
static int global_address;
static const int id = 0x50D190;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x50D190, 0x50D380, 0x50D310>;
// total references count: 10en (99), 11en (99), steam (99)
using refs_t = RefList<0x422A47,100,0,0x4222D0,1, 0x4BB6B7,100,0,0x4BB240,1, 0x4BB943,100,0,0x4BB240,2, 0x4BBB24,100,0,0x4BB240,3, 0x4BBD17,100,0,0x4BB240,4, 0x4BD6D2,100,0,0x4BCA80,1, 0x4BD72B,100,0,0x4BCA80,2, 0x4BD8A6,100,0,0x4BCA80,3, 0x4BD8FF,100,0,0x4BCA80,4, 0x4BDA7A,100,0,0x4BCA80,5, 0x4BDAD3,100,0,0x4BCA80,6, 0x4BDC24,100,0,0x4BCA80,7, 0x4BDC7D,100,0,0x4BCA80,8, 0x4BDE56,100,0,0x4BCA80,9, 0x4BDFBD,100,0,0x4BCA80,10, 0x4BE11E,100,0,0x4BCA80,11, 0x4BE25A,100,0,0x4BCA80,12, 0x4BE4D3,100,0,0x4BCA80,13, 0x4BE504,100,0,0x4BCA80,14, 0x4BE69D,100,0,0x4BCA80,15, 0x4BE6CE,100,0,0x4BCA80,16, 0x4BE867,100,0,0x4BCA80,17, 0x4BE898,100,0,0x4BCA80,18, 0x4BEA13,100,0,0x4BCA80,19, 0x4BEA44,100,0,0x4BCA80,20, 0x4BEBF6,100,0,0x4BCA80,21, 0x4BED32,100,0,0x4BCA80,22, 0x4BEE68,100,0,0x4BCA80,23, 0x4BEF79,100,0,0x4BCA80,24, 0x4BF0FA,100,0,0x4BCA80,25, 0x4BF1B8,100,0,0x4BCA80,26, 0x4BF29A,100,0,0x4BCA80,27, 0x4BF352,100,0,0x4BCA80,28, 0x4BF537,100,0,0x4BCA80,29, 0x4BF5F5,100,0,0x4BCA80,30, 0x4BF68F,100,0,0x4BCA80,31, 0x4BF6E2,100,0,0x4BCA80,32, 0x4BF8F7,100,0,0x4BCA80,33, 0x4BF937,100,0,0x4BCA80,34, 0x4C87DF,100,0,0x4C7FF0,1, 0x4CC5A3,100,0,0x4CC4C0,1, 0x4CC69E,100,0,0x4CC5C0,1, 0x4CCD69,100,0,0x4CC6C0,1, 0x4CCDBB,100,0,0x4CC6C0,2, 0x502331,100,0,0x502080,1, 0x50D17D,100,0,0x50D140,1, 0x50E85B,100,0,0x50DCF0,1, 0x50E912,100,0,0x50DCF0,2, 0x50F910,100,0,0x50F760,1, 0x50F9B8,100,0,0x50F760,2, 0x50FA60,100,0,0x50F760,3, 0x50FC2D,100,0,0x50FAA0,1, 0x51BFD7,100,0,0x51BC50,1, 0x51C14A,100,0,0x51C040,1, 0x52356F,100,0,0x5231B0,1, 0x52372F,100,0,0x5231B0,2, 0x5238FE,100,0,0x5231B0,3, 0x523AF9,100,0,0x5231B0,4, 0x524098,100,0,0x5231B0,5, 0x52F373,100,0,0x52F030,1, 0x530EF0,100,0,0x5308D0,1, 0x531369,100,0,0x5308D0,2, 0x531401,100,0,0x5308D0,3, 0x5358B0,100,0,0x5357D0,1, 0x53596B,100,0,0x5357D0,2, 0x535A23,100,0,0x5357D0,3, 0x535B03,100,0,0x5357D0,4, 0x53DB9E,100,0,0x53D530,1, 0x53DD15,100,0,0x53D530,2, 0x53DDF6,100,0,0x53D530,3, 0x53DE78,100,0,0x53D530,4, 0x53DEFA,100,0,0x53D530,5, 0x540744,100,0,0x53EF10,1, 0x540855,100,0,0x53EF10,2, 0x540892,100,0,0x53EF10,3, 0x540924,100,0,0x53EF10,4, 0x540A35,100,0,0x53EF10,5, 0x5414A8,100,0,0x53EF10,6, 0x5414D8,100,0,0x53EF10,7, 0x541737,100,0,0x53EF10,8, 0x541767,100,0,0x53EF10,9, 0x5477A2,100,0,0x547540,1, 0x549F69,100,0,0x5499F0,1, 0x54C54F,100,0,0x54C1D0,1, 0x54CA84,100,0,0x54C1D0,2, 0x559489,100,0,0x5591C0,1, 0x5596AD,100,0,0x5591C0,2, 0x5597CB,100,0,0x5591C0,3, 0x55981A,100,0,0x5591C0,4, 0x5599D2,100,0,0x5591C0,5, 0x559AC8,100,0,0x5591C0,6, 0x559D7D,100,0,0x5591C0,7, 0x55A28E,100,0,0x55A0C0,1, 0x55A315,100,0,0x55A0C0,2, 0x55A437,100,0,0x55A0C0,3, 0x55A484,100,0,0x55A0C0,4, 0x55A997,100,0,0x55A0C0,5, 0x55ABE8,100,0,0x55A0C0,6, 0x55F935,100,0,0x55F770,1, 0x422A47,110,0,0x4222D0,1, 0x4BB7A7,110,0,0x4BB330,1, 0x4BBA33,110,0,0x4BB330,2, 0x4BBC14,110,0,0x4BB330,3, 0x4BBE07,110,0,0x4BB330,4, 0x4BD7C2,110,0,0x4BCB70,1, 0x4BD81B,110,0,0x4BCB70,2, 0x4BD996,110,0,0x4BCB70,3, 0x4BD9EF,110,0,0x4BCB70,4, 0x4BDB6A,110,0,0x4BCB70,5, 0x4BDBC3,110,0,0x4BCB70,6, 0x4BDD14,110,0,0x4BCB70,7, 0x4BDD6D,110,0,0x4BCB70,8, 0x4BDF46,110,0,0x4BCB70,9, 0x4BE0AD,110,0,0x4BCB70,10, 0x4BE20E,110,0,0x4BCB70,11, 0x4BE34A,110,0,0x4BCB70,12, 0x4BE5C3,110,0,0x4BCB70,13, 0x4BE5F4,110,0,0x4BCB70,14, 0x4BE78D,110,0,0x4BCB70,15, 0x4BE7BE,110,0,0x4BCB70,16, 0x4BE957,110,0,0x4BCB70,17, 0x4BE988,110,0,0x4BCB70,18, 0x4BEB03,110,0,0x4BCB70,19, 0x4BEB34,110,0,0x4BCB70,20, 0x4BECE6,110,0,0x4BCB70,21, 0x4BEE22,110,0,0x4BCB70,22, 0x4BEF58,110,0,0x4BCB70,23, 0x4BF069,110,0,0x4BCB70,24, 0x4BF1EA,110,0,0x4BCB70,25, 0x4BF2A8,110,0,0x4BCB70,26, 0x4BF38A,110,0,0x4BCB70,27, 0x4BF442,110,0,0x4BCB70,28, 0x4BF627,110,0,0x4BCB70,29, 0x4BF6E5,110,0,0x4BCB70,30, 0x4BF77F,110,0,0x4BCB70,31, 0x4BF7D2,110,0,0x4BCB70,32, 0x4BF9E7,110,0,0x4BCB70,33, 0x4BFA27,110,0,0x4BCB70,34, 0x4C887F,110,0,0x4C8090,1, 0x4CC643,110,0,0x4CC560,1, 0x4CC73E,110,0,0x4CC660,1, 0x4CCE09,110,0,0x4CC760,1, 0x4CCE5B,110,0,0x4CC760,2, 0x502411,110,0,0x502160,1, 0x50D36D,110,0,0x50D330,1, 0x50EA4B,110,0,0x50DEE0,1, 0x50EB02,110,0,0x50DEE0,2, 0x50FB00,110,0,0x50F950,1, 0x50FBA8,110,0,0x50F950,2, 0x50FC50,110,0,0x50F950,3, 0x50FE1D,110,0,0x50FC90,1, 0x51C207,110,0,0x51BE80,1, 0x51C37A,110,0,0x51C270,1, 0x5237AF,110,0,0x5233F0,1, 0x52396F,110,0,0x5233F0,2, 0x523B3E,110,0,0x5233F0,3, 0x523D39,110,0,0x5233F0,4, 0x5242D8,110,0,0x5233F0,5, 0x52F5B3,110,0,0x52F270,1, 0x531130,110,0,0x530B10,1, 0x5315A9,110,0,0x530B10,2, 0x531641,110,0,0x530B10,3, 0x535AF0,110,0,0x535A10,1, 0x535BAB,110,0,0x535A10,2, 0x535C63,110,0,0x535A10,3, 0x535D43,110,0,0x535A10,4, 0x53DDDE,110,0,0x53D770,1, 0x53DF55,110,0,0x53D770,2, 0x53E036,110,0,0x53D770,3, 0x53E0B8,110,0,0x53D770,4, 0x53E13A,110,0,0x53D770,5, 0x540984,110,0,0x53F150,1, 0x540A95,110,0,0x53F150,2, 0x540AD2,110,0,0x53F150,3, 0x540B64,110,0,0x53F150,4, 0x540C75,110,0,0x53F150,5, 0x5416E8,110,0,0x53F150,6, 0x541718,110,0,0x53F150,7, 0x541977,110,0,0x53F150,8, 0x5419A7,110,0,0x53F150,9, 0x5479A2,110,0,0x547740,1, 0x54A169,110,0,0x549BF0,1, 0x54C6CF,110,0,0x54C350,1, 0x54CC04,110,0,0x54C350,2, 0x5595B9,110,0,0x5592F0,1, 0x5597DD,110,0,0x5592F0,2, 0x5598FB,110,0,0x5592F0,3, 0x55994A,110,0,0x5592F0,4, 0x559B02,110,0,0x5592F0,5, 0x559BF8,110,0,0x5592F0,6, 0x559EAD,110,0,0x5592F0,7, 0x55A3BE,110,0,0x55A1F0,1, 0x55A445,110,0,0x55A1F0,2, 0x55A567,110,0,0x55A1F0,3, 0x55A5B4,110,0,0x55A1F0,4, 0x55AAC7,110,0,0x55A1F0,5, 0x55AD18,110,0,0x55A1F0,6, 0x55FA65,110,0,0x55F8A0,1, 0x422A47,120,0,0x4222D0,1, 0x4BB737,120,0,0x4BB2C0,1, 0x4BB9C3,120,0,0x4BB2C0,2, 0x4BBBA4,120,0,0x4BB2C0,3, 0x4BBD97,120,0,0x4BB2C0,4, 0x4BD752,120,0,0x4BCB00,1, 0x4BD7AB,120,0,0x4BCB00,2, 0x4BD926,120,0,0x4BCB00,3, 0x4BD97F,120,0,0x4BCB00,4, 0x4BDAFA,120,0,0x4BCB00,5, 0x4BDB53,120,0,0x4BCB00,6, 0x4BDCA4,120,0,0x4BCB00,7, 0x4BDCFD,120,0,0x4BCB00,8, 0x4BDED6,120,0,0x4BCB00,9, 0x4BE03D,120,0,0x4BCB00,10, 0x4BE19E,120,0,0x4BCB00,11, 0x4BE2DA,120,0,0x4BCB00,12, 0x4BE553,120,0,0x4BCB00,13, 0x4BE584,120,0,0x4BCB00,14, 0x4BE71D,120,0,0x4BCB00,15, 0x4BE74E,120,0,0x4BCB00,16, 0x4BE8E7,120,0,0x4BCB00,17, 0x4BE918,120,0,0x4BCB00,18, 0x4BEA93,120,0,0x4BCB00,19, 0x4BEAC4,120,0,0x4BCB00,20, 0x4BEC76,120,0,0x4BCB00,21, 0x4BEDB2,120,0,0x4BCB00,22, 0x4BEEE8,120,0,0x4BCB00,23, 0x4BEFF9,120,0,0x4BCB00,24, 0x4BF17A,120,0,0x4BCB00,25, 0x4BF238,120,0,0x4BCB00,26, 0x4BF31A,120,0,0x4BCB00,27, 0x4BF3D2,120,0,0x4BCB00,28, 0x4BF5B7,120,0,0x4BCB00,29, 0x4BF675,120,0,0x4BCB00,30, 0x4BF70F,120,0,0x4BCB00,31, 0x4BF762,120,0,0x4BCB00,32, 0x4BF977,120,0,0x4BCB00,33, 0x4BF9B7,120,0,0x4BCB00,34, 0x4C880F,120,0,0x4C8020,1, 0x4CC5D3,120,0,0x4CC4F0,1, 0x4CC6CE,120,0,0x4CC5F0,1, 0x4CCD99,120,0,0x4CC6F0,1, 0x4CCDEB,120,0,0x4CC6F0,2, 0x5023A1,120,0,0x5020F0,1, 0x50D2FD,120,0,0x50D2C0,1, 0x50E9DB,120,0,0x50DE70,1, 0x50EA92,120,0,0x50DE70,2, 0x50FA90,120,0,0x50F8E0,1, 0x50FB38,120,0,0x50F8E0,2, 0x50FBE0,120,0,0x50F8E0,3, 0x50FDAD,120,0,0x50FC20,1, 0x51C197,120,0,0x51BE10,1, 0x51C30A,120,0,0x51C200,1, 0x52373F,120,0,0x523380,1, 0x5238FF,120,0,0x523380,2, 0x523ACE,120,0,0x523380,3, 0x523CC9,120,0,0x523380,4, 0x524268,120,0,0x523380,5, 0x52F543,120,0,0x52F200,1, 0x5310C0,120,0,0x530AA0,1, 0x531539,120,0,0x530AA0,2, 0x5315D1,120,0,0x530AA0,3, 0x535A80,120,0,0x5359A0,1, 0x535B3B,120,0,0x5359A0,2, 0x535BF3,120,0,0x5359A0,3, 0x535CD3,120,0,0x5359A0,4, 0x53DD8E,120,0,0x53D720,1, 0x53DF05,120,0,0x53D720,2, 0x53DFE6,120,0,0x53D720,3, 0x53E068,120,0,0x53D720,4, 0x53E0EA,120,0,0x53D720,5, 0x540934,120,0,0x53F100,1, 0x540A45,120,0,0x53F100,2, 0x540A82,120,0,0x53F100,3, 0x540B14,120,0,0x53F100,4, 0x540C25,120,0,0x53F100,5, 0x541698,120,0,0x53F100,6, 0x5416C8,120,0,0x53F100,7, 0x541927,120,0,0x53F100,8, 0x541957,120,0,0x53F100,9, 0x547952,120,0,0x5476F0,1, 0x54A119,120,0,0x549BA0,1, 0x54C67F,120,0,0x54C300,1, 0x54CBB4,120,0,0x54C300,2, 0x559569,120,0,0x5592A0,1, 0x55978D,120,0,0x5592A0,2, 0x5598AB,120,0,0x5592A0,3, 0x5598FA,120,0,0x5592A0,4, 0x559AB2,120,0,0x5592A0,5, 0x559BA8,120,0,0x5592A0,6, 0x559E5D,120,0,0x5592A0,7, 0x55A36E,120,0,0x55A1A0,1, 0x55A3F5,120,0,0x55A1A0,2, 0x55A517,120,0,0x55A1A0,3, 0x55A564,120,0,0x55A1A0,4, 0x55AA77,120,0,0x55A1A0,5, 0x55ACC8,120,0,0x55A1A0,6, 0x55FA15,120,0,0x55F850,1>;
using def_t = CParticle *(tParticleType, CVector const &, CVector const &, CEntity *, float, RwRGBA const &, int, int, int, int);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Cdecl;
using args_t = ArgPick<ArgTypes<tParticleType,CVector const &,CVector const &,CEntity *,float,RwRGBA const &,int,int,int,int>, 0,1,2,3,4,5,6,7,8,9>;
META_END

META_BEGIN(CParticle::Update)
static int address;
static int global_address;
static const int id = 0x50DCF0;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x50DCF0, 0x50DEE0, 0x50DE70>;
// total references count: 10en (1), 11en (1), steam (1)
using refs_t = RefList<0x48C92C,100,0,0x48C850,1, 0x48CA2C,110,0,0x48C950,1, 0x48C9BC,120,0,0x48C8E0,1>;
using def_t = void();
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Cdecl;
using args_t = ArgPick<ArgTypes<>>;
META_END

META_BEGIN(CParticle::Render)
static int address;
static int global_address;
static const int id = 0x50EE20;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x50EE20, 0x50F010, 0x50EFA0>;
// total references count: 10en (1), 11en (1), steam (1)
using refs_t = RefList<0x48E0BD,100,0,0x48E090,1, 0x48E17D,110,0,0x48E150,1, 0x48E10D,120,0,0x48E0E0,1>;
using def_t = void();
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Cdecl;
using args_t = ArgPick<ArgTypes<>>;
META_END

META_BEGIN(CParticle::RemovePSystem)
static int address;
static int global_address;
static const int id = 0x50F6E0;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x50F6E0, 0x50F8D0, 0x50F860>;
// total references count: 10en (1), 11en (1), steam (1)
using refs_t = RefList<0x5231FB,100,0,0x5231B0,1, 0x52343B,110,0,0x5233F0,1, 0x5233CB,120,0,0x523380,1>;
using def_t = void(tParticleType);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Cdecl;
using args_t = ArgPick<ArgTypes<tParticleType>, 0>;
META_END

META_BEGIN(CParticle::RemoveParticle)
static int address;
static int global_address;
static const int id = 0x50F720;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x50F720, 0x50F910, 0x50F8A0>;
// total references count: 10en (2), 11en (2), steam (2)
using refs_t = RefList<0x50EC82,100,0,0x50DCF0,1, 0x50F704,100,0,0x50F6E0,1, 0x50EE72,110,0,0x50DEE0,1, 0x50F8F4,110,0,0x50F8D0,1, 0x50EE02,120,0,0x50DE70,1, 0x50F884,120,0,0x50F860,1>;
using def_t = void(CParticle *, CParticle *, tParticleSystemData *);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Cdecl;
using args_t = ArgPick<ArgTypes<CParticle *,CParticle *,tParticleSystemData *>, 0,1,2>;
META_END

META_BEGIN(CParticle::AddJetExplosion)
static int address;
static int global_address;
static const int id = 0x50F760;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x50F760, 0x50F950, 0x50F8E0>;
// total references count: 10en (3), 11en (3), steam (3)
using refs_t = RefList<0x559891,100,0,0x5591C0,1, 0x559B8A,100,0,0x5591C0,2, 0x55A382,100,0,0x55A0C0,1, 0x5599C1,110,0,0x5592F0,1, 0x559CBA,110,0,0x5592F0,2, 0x55A4B2,110,0,0x55A1F0,1, 0x559971,120,0,0x5592A0,1, 0x559C6A,120,0,0x5592A0,2, 0x55A462,120,0,0x55A1A0,1>;
using def_t = void(CVector const &, float, float);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Cdecl;
using args_t = ArgPick<ArgTypes<CVector const &,float,float>, 0,1,2>;
META_END

META_BEGIN(CParticle::AddYardieDoorSmoke)
static int address;
static int global_address;
static const int id = 0x50FAA0;
static const bool is_virtual = false;
static const int vtable_index = -1;
using mv_addresses_t = MvAddresses<0x50FAA0, 0x50FC90, 0x50FC20>;
// total references count: 10en (1), 11en (1), steam (1)
using refs_t = RefList<0x4E0FFD,100,0,0x4E0FA0,1, 0x4E10AD,110,0,0x4E1050,1, 0x4E103D,120,0,0x4E0FE0,1>;
using def_t = void(CVector const &, CMatrix const &);
static const int cb_priority = PRIORITY_BEFORE; 
using calling_convention_t = CallingConventions::Cdecl;
using args_t = ArgPick<ArgTypes<CVector const &,CMatrix const &>, 0,1>;
META_END

template<>
struct stack_object<CParticle> : stack_object_no_default<CParticle> {
    SUPPORTED_10EN_11EN_STEAM stack_object() {
        plugin::CallMethodDynGlobal<CParticle *>(ctor_gaddr(CParticle), reinterpret_cast<CParticle *>(objBuff));
    }
    SUPPORTED_10EN_11EN_STEAM ~stack_object() {
        plugin::CallMethodDynGlobal<CParticle *>(dtor_gaddr(CParticle), reinterpret_cast<CParticle *>(objBuff));
    }
};

template <>
SUPPORTED_10EN_11EN_STEAM inline CParticle *operator_new<CParticle>() {
    void *objData = operator new(sizeof(CParticle)); 
    CParticle *obj = reinterpret_cast<CParticle *>(objData);
    plugin::CallMethodDynGlobal<CParticle *>(ctor_gaddr(CParticle), obj);
    return obj;
}
template <>
SUPPORTED_10EN_11EN_STEAM inline CParticle *operator_new_array<CParticle>(unsigned int objCount) {
    void *objData = operator new(sizeof(CParticle) * objCount + 4); 
    *reinterpret_cast<unsigned int *>(objData) = objCount;
    CParticle *objArray = reinterpret_cast<CParticle *>(reinterpret_cast<unsigned int>(objData) + 4);
    for (unsigned int i = 0; i < objCount; i++)
        plugin::CallMethodDynGlobal<CParticle *>(ctor_gaddr(CParticle), &objArray[i]);
    return objArray;
}
template <>
SUPPORTED_10EN_11EN_STEAM inline void operator_delete<CParticle>(CParticle *obj) {
    if (obj == nullptr) return;
    plugin::CallMethodDynGlobal<CParticle *>(dtor_gaddr(CParticle), obj);
    operator delete(obj);
}
template <>
SUPPORTED_10EN_11EN_STEAM inline void operator_delete_array<CParticle>(CParticle *objArray) {
    if (objArray == nullptr) return;
    void *objData = reinterpret_cast<void *>(reinterpret_cast<char *>(objArray) - 4);
    unsigned int arraySize = *reinterpret_cast<unsigned int *>(objData);
    for (unsigned int i = 0; i < arraySize; i++)
        plugin::CallMethodDynGlobal<CParticle *>(dtor_gaddr(CParticle), &objArray[i]);
    operator delete(objData);
}

}
